import vue from "@vitejs/plugin-vue"
import vueJsx from '@vitejs/plugin-vue-jsx'
import { defineConfig, loadEnv } from "vite"
import { resolve } from "path"
import dfxJson from "../dfx.json"
import fs from "fs"
import inject from '@rollup/plugin-inject'


type Network = "ic" | "local"

interface CanisterIds {
  [key: string]: { [key in Network]: string }
}

// Gets the port dfx is running on from dfx.json
const DFX_PORT = dfxJson.networks.local.bind.split(":")[1]

// See guide on how to configure Vite at:
// https://vitejs.dev/config/
export default ({mode}) =>{  
  process.env = { ...process.env, ...loadEnv(mode, process.cwd()) }
  console.log(`DFX_NETWORK:${process.env["VITE_APP_DFX_NETWORK"]}`)
  const isDev = process.env["VITE_APP_DFX_NETWORK"] !== "ic"

  let canisterIds: CanisterIds
  try {
    canisterIds = JSON.parse(
        fs
            .readFileSync(
                isDev ? "../.dfx/local/canister_ids.json" : "../canister_ids.json",
            )
            .toString(),
    )
  } catch (e) {
    console.error("\n⚠️  Before starting the dev server run: dfx deploy\n\n")
  }
  // console.log('[canisterIds]', canisterIds)

  // Generate canister ids, required by the generated canister code in .dfx/local/canisters/*
  // This strange way of JSON.stringifying the value is required by vite
  const canisterDefinitions = Object.entries(canisterIds).reduce(
      (acc, [key, val]) => ({
        ...acc,
        [`process.env.${key.toUpperCase()}_CANISTER_ID`]: isDev
            ? JSON.stringify(val.local)
            : JSON.stringify(val.ic),
      }),
      {},
  )
  // console.log('canisterDefinitions',canisterDefinitions)

  return defineConfig({
    plugins: [vue(),vueJsx()],
    resolve: {
      alias: {
        // Here we tell Vite the "fake" modules that we want to define
        // ...aliases,
        '@': resolve(__dirname, './src'),
        '@img':resolve(__dirname, './src/assets/img'),
      },
    },
    server: {
      fs: {
        allow: ["."],
      },
      proxy: {
        // This proxies all http requests made to /api to our running dfx instance
        "/api": {
          // target: `http://localhost:${DFX_PORT}`,
          target: `https://ic0.app`,
          changeOrigin: true,
          rewrite: (path) => path.replace(/^\/api/, "/api"),
        },
      },
    },
    define: {
      // Here we can define global constants
      // This is required for now because the code generated by dfx relies on process.env being set
      ...canisterDefinitions,
      "process.env.NODE_ENV": JSON.stringify(
          isDev ? "development" : "production",
      ),
    },
    build:{
      minify: 'terser',
        terserOptions: {
          compress: {
            //生产环境时移除console
            drop_console: true,
            drop_debugger: true,
          },
        },
        rollupOptions: {
          plugins: [inject({ Buffer: ['buffer', 'Buffer'] })],
        },
        commonjsOptions: {
          transformMixedEsModules: true,
        },
    },
  })
}
